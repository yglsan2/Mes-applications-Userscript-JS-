// ==UserScript==
// @name KanbanExposé
// @namespace http://tampermonkey.net/
// @version 2.0
// @description Kanban pour exposé
// @author Yglsan
// @match *://*/*
// @grant GM_addStyle
// @grant GM_setValue
// @grant GM_getValue
// @grant GM_deleteValue
// @connect *
// @license GnuGPL 3.0
// ==/UserScript==

(function() {
    'use strict';
    GM_addStyle(`
        :root { --primary-color: #2c3e50; --secondary-color: #3498db; --success-color: #27ae60; --danger-color: #e74c3c; --background-color: #ecf0f1; --text-color: #2c3e50; --border-radius: 10px; --box-shadow: 0 4px 6px rgba(0,0,0,0.1); --transition: all 0.3s ease; }
        body { color: var(--text-color); background-color: var(--background-color); }
        #kanbanContainer { position: fixed; bottom: 30px; right: 30px; width: 800px; max-width: 90vw; background: white; border-radius: var(--border-radius); box-shadow: var(--box-shadow); font-family: 'Segoe UI', system-ui, sans-serif; z-index: 10000; display: none; flex-direction: column; max-height: 90vh; }
        .kanban-header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; background: var(--primary-color); color: white; border-radius: var(--border-radius) var(--border-radius) 0 0; }
        .kanban-title { font-size: 1.5rem; font-weight: 600; }
        .kanban-controls { display: flex; gap: 0.5rem; align-items: center; }
        .control-button { padding: 0.5rem 1rem; border: none; border-radius: 6px; cursor: pointer; background: rgba(255, 255, 255, 0.1); color: white; display: flex; align-items: center; gap: 0.5rem; transition: var(--transition); }
        .control-button:hover { background: rgba(255, 255, 255, 0.2); }
        .kanban-body { display: grid; grid-template-columns: repeat(3, 1fr); gap: 1.5rem; padding: 1.5rem; overflow-y: auto; flex-grow: 1; }
        .kanban-column { background: var(--background-color); border-radius: var(--border-radius); padding: 1rem; min-height: 400px; display: flex; flex-direction: column; gap: 1rem; }
        .column-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid var(--primary-color); }
        .add-task-button { padding: 0.5rem 1rem; background: var(--secondary-color); color: white; border: none; border-radius: 6px; cursor: pointer; transition: var(--transition); display: flex; align-items: center; gap: 0.5rem; }
        .add-task-button:hover { background: #2980b9; }
        .kanban-task { background: white; padding: 1rem; border-radius: 6px; box-shadow: var(--box-shadow); cursor: grab; position: relative; transition: var(--transition); border-left: 4px solid transparent; }
        .kanban-task.dragging { opacity: 0.5; transform: rotate(3deg); }
        .task-content { display: flex; flex-direction: column; gap: 0.5rem; }
        .task-priority { font-size: 0.8em; padding: 0.2em 0.5em; border-radius: 4px; align-self: flex-start; }
        .priority-high { border-color: #e74c3c; background: #f9e2e2; }
        .priority-medium { border-color: #f1c40f; background: #fcf3cf; }
        .priority-low { border-color: #2ecc71; background: #e8f6ee; }
        .delete-task { position: absolute; top: 0.5rem; right: 0.5rem; cursor: pointer; opacity: 0; transition: var(--transition); color: var(--danger-color); }
        .kanban-task:hover .delete-task { opacity: 1; }
        #toggleKanban { position: fixed; bottom: 30px; right: 30px; padding: 1rem 1.5rem; background: var(--primary-color); color: white; border: none; border-radius: 50px; cursor: pointer; box-shadow: var(--box-shadow); display: flex; align-items: center; gap: 0.5rem; z-index: 9999; }
        .language-selector { position: relative; }
        .language-menu { position: absolute; right: 0; top: 100%; background: white; border-radius: var(--border-radius); box-shadow: var(--box-shadow); padding: 0.5rem; min-width: 150px; display: none; z-index: 10000; border: 1px solid var(--primary-color); color: black; }
        .language-option { padding: 0.5rem; cursor: pointer; border-radius: 4px; display: flex; align-items: center; gap: 0.5rem; }
        .language-option:hover { background: var(--background-color); }
        .size-button { padding: 0.5rem; border: none; border-radius: 6px; cursor: pointer; background: rgba(255, 255, 255, 0.1); color: white; display: flex; align-items: center; gap: 0.5rem; }
        .size-button:hover { background: rgba(255, 255, 255, 0.2); }
    `);

    const translations = {
        gb: { title: "Kanban Board", todo: "To Do", inProgress: "In Progress", done: "Done", addTask: "Add Task", export: "Export", import: "Import", language: "Language", delete: "Delete", confirmDelete: "Delete this task?", priority: "Priority", high: "High", medium: "Medium", low: "Low", cancel: "Cancel", save: "Save", resetConfirm: "Reset all tasks?", importError: "Invalid file format" },
        fr: { title: "Tableau Kanban", todo: "À Faire", inProgress: "En Cours", done: "Terminé", addTask: "Ajouter Tâche", export: "Exporter", import: "Importer", language: "Langue", delete: "Supprimer", confirmDelete: "Supprimer cette tâche ?", priority: "Priorité", high: "Haute", medium: "Moyenne", low: "Basse", cancel: "Annuler", save: "Enregistrer", resetConfirm: "Réinitialiser toutes les tâches ?", importError: "Format de fichier invalide" },
        de: { title: "Kanban-Board", todo: "Zu Erledigen", inProgress: "In Bearbeitung", done: "Fertig", addTask: "Aufgabe Hinzufügen", export: "Exportieren", import: "Importieren", language: "Sprache", delete: "Löschen", confirmDelete: "Diese Aufgabe löschen?", priority: "Priorität", high: "Hoch", medium: "Mittel", low: "Niedrig", cancel: "Abbrechen", save: "Speichern", resetConfirm: "Alle Aufgaben zurücksetzen?", importError: "Ungültiges Dateiformat" },
        it: { title: "Bacheca Kanban", todo: "Da Fare", inProgress: "In Corso", done: "Fatto", addTask: "Aggiungi Compito", export: "Esporta", import: "Importa", language: "Lingua", delete: "Elimina", confirmDelete: "Eliminare questo compito?", priority: "Priorità", high: "Alta", medium: "Media", low: "Bassa", cancel: "Annulla", save: "Salva", resetConfirm: "Ripristinare tutte le attività?", importError: "Formato file non valido" },
        es: { title: "Tablero Kanban", todo: "Por Hacer", inProgress: "En Progreso", done: "Hecho", addTask: "Agregar Tarea", export: "Exportar", import: "Importar", language: "Idioma", delete: "Eliminar", confirmDelete: "¿Eliminar esta tarea?", priority: "Prioridad", high: "Alta", medium: "Media", low: "Baja", cancel: "Cancelar", save: "Guardar", resetConfirm: "¿Restablecer todas las tareas?", importError: "Formato de archivo no válido" },
        jp: { title: "カンバンボード", todo: "やること", inProgress: "進行中", done: "完了", addTask: "タスクを追加", export: "エクスポート", import: "インポート", language: "言語", delete: "削除", confirmDelete: "このタスクを削除しますか？", priority: "優先度", high: "高", medium: "中", low: "低", cancel: "キャンセル", save: "保存", resetConfirm: "すべてのタスクをリセットしますか？", importError: "無効なファイル形式" },
        kr: { title: "칸반 보드", todo: "해야 할 일", inProgress: "진행 중", done: "완료", addTask: "작업 추가", export: "내보내기", import: "가져오기", language: "언어", delete: "삭제", confirmDelete: "이 작업을 삭제하시겠습니까?", priority: "우선 순위", high: "높음", medium: "중간", low: "낮음", cancel: "취소", save: "저장", resetConfirm: "모든 작업을 재설정하시겠습니까?", importError: "유효하지 않은 파일 형식" },
        cn: { title: "看板", todo: "待办事项", inProgress: "进行中", done: "完成", addTask: "添加任务", export: "导出", import: "导入", language: "语言", delete: "删除", confirmDelete: "删除此任务？", priority: "优先级", high: "高", medium: "中", low: "低", cancel: "取消", save: "保存", resetConfirm: "重置所有任务？", importError: "无效的文件格式" },
        lv: { title: "Kanban dēlis", todo: "Jādara", inProgress: "Procesā", done: "Izpildīts", addTask: "Pievienot uzdevumu", export: "Eksportēt", import: "Importēt", language: "Valoda", delete: "Dzēst", confirmDelete: "Dzēst šo uzdevumu?", priority: "Prioritāte", high: "Augsta", medium: "Vidēja", low: "Zema", cancel: "Atcelt", save: "Saglabāt", resetConfirm: "Atjaunot visus uzdevumus?", importError: "Nederīgs faila formāts" },
        ru: { title: "Доска Канбан", todo: "К выполнению", inProgress: "В процессе", done: "Сделано", addTask: "Добавить задачу", export: "Экспорт", import: "Импорт", language: "Язык", delete: "Удалить", confirmDelete: "Удалить эту задачу?", priority: "Приоритет", high: "Высокий", medium: "Средний", low: "Низкий", cancel: "Отмена", save: "Сохранить", resetConfirm: "Сбросить все задачи?", importError: "Неверный формат файла" },
        pt: { title: "Quadro Kanban", todo: "A Fazer", inProgress: "Em Progresso", done: "Concluído", addTask: "Adicionar Tarefa", export: "Exportar", import: "Importar", language: "Idioma", delete: "Excluir", confirmDelete: "Excluir esta tarefa?", priority: "Prioridade", high: "Alta", medium: "Média", low: "Baixa", cancel: "Cancelar", save: "Salvar", resetConfirm: "Redefinir todas as tarefas?", importError: "Formato de arquivo inválido" },
        sa: { title: "لوحة كانبان", todo: "للقيام به", inProgress: "قيد التقدم", done: "منجز", addTask: "إضافة مهمة", export: "تصدير", import: "استيراد", language: "لغة", delete: "حذف", confirmDelete: "هل تريد حذف هذه المهمة؟", priority: "أولوية", high: "عالية", medium: "متوسطة", low: "منخفضة", cancel: "إلغاء", save: "حفظ", resetConfirm: "إعادة تعيين جميع المهام؟", importError: "تنسيق الملف غير صالح" }
    };

    let currentLanguage = 'fr';
    let isVisible = false;
    let isDraggingTask = false;

    const kanbanHTML = `
        <div class="kanban-header">
            <div class="kanban-title">${translations[currentLanguage].title}</div>
            <div class="kanban-controls">
                <button class="control-button" id="exportBtn"><span>↓</span> ${translations[currentLanguage].export}</button>
                <button class="control-button" id="importBtn"><span>↑</span> ${translations[currentLanguage].import}</button>
                <div class="language-selector">
                    <button class="control-button" id="languageBtn">🌐 ${translations[currentLanguage].language}</button>
                    <div class="language-menu">
                        ${Object.entries(translations).map(([code, lang]) =>
                            `<div class="language-option" data-lang="${code}"><img src="https://flagcdn.com/w20/${code}.png" alt="${code}" style="width: 20px; height: 20px;"> ${lang.title}</div>`
                        ).join('')}
                    </div>
                </div>
                <div class="size-selector">
                    <button class="size-button" data-size="small">📏</button>
                    <button class="size-button" data-size="medium">📐</button>
                    <button class="size-button" data-size="large">📊</button>
                </div>
            </div>
        </div>
        <div class="kanban-body">
            <div class="kanban-column" id="todo">
                <div class="column-header">
                    <h3>${translations[currentLanguage].todo}</h3>
                    <button class="add-task-button">+ ${translations[currentLanguage].addTask}</button>
                </div>
            </div>
            <div class="kanban-column" id="inProgress">
                <div class="column-header">
                    <h3>${translations[currentLanguage].inProgress}</h3>
                    <button class="add-task-button">+ ${translations[currentLanguage].addTask}</button>
                </div>
            </div>
            <div class="kanban-column" id="done">
                <div class="column-header">
                    <h3>${translations[currentLanguage].done}</h3>
                    <button class="add-task-button">+ ${translations[currentLanguage].addTask}</button>
                </div>
            </div>
        </div>
    `;

    const container = document.createElement('div');
    container.id = 'kanbanContainer';
    container.innerHTML = kanbanHTML;
    document.body.appendChild(container);

    const toggleBtn = document.createElement('button');
    toggleBtn.id = 'toggleKanban';
    toggleBtn.textContent = translations[currentLanguage].title;
    document.body.appendChild(toggleBtn);

    let tasks = JSON.parse(GM_getValue('kanbanTasks', '[]'));
    let dragTask = null;

    function initKanban() {
        tasks.forEach(task => createTaskElement(task));
        setupDragAndDrop();
        document.querySelectorAll('.add-task-button').forEach(btn => {
            btn.addEventListener('click', showTaskForm);
        });
        document.getElementById('languageBtn').addEventListener('click', toggleLanguageMenu);
        document.querySelectorAll('.language-option').forEach(option => {
            option.addEventListener('click', changeLanguage);
        });
        document.getElementById('exportBtn').addEventListener('click', exportTasks);
        document.getElementById('importBtn').addEventListener('click', importTasks);
        document.querySelectorAll('.size-button').forEach(button => {
            button.addEventListener('click', changeSize);
        });
        toggleBtn.addEventListener('click', () => {
            isVisible = !isVisible;
            container.style.display = isVisible ? 'flex' : 'none';
            toggleBtn.textContent = isVisible ? `▲ ${translations[currentLanguage].title}` : `▼ ${translations[currentLanguage].title}`;
        });
        makeDraggable(container);
    }

    function createTaskElement(taskData) {
        const task = document.createElement('div');
        task.className = `kanban-task priority-${taskData.priority}`;
        task.draggable = true;
        task.innerHTML = `
            <div class="task-content">
                <div>${taskData.text}</div>
                <div class="task-priority">${translations[currentLanguage][taskData.priority]}</div>
            </div>
            <div class="delete-task">×</div>
        `;
        task.querySelector('.delete-task').addEventListener('click', () => {
            if (confirm(translations[currentLanguage].confirmDelete)) {
                task.remove();
                saveTasks();
            }
        });
        document.getElementById(taskData.column).appendChild(task);
        return task;
    }

    function showTaskForm(e) {
        const columnId = e.target.closest('.kanban-column').id;
        const form = document.createElement('div');
        form.className = 'task-form';
        form.innerHTML = `
            <input type="text" placeholder="${translations[currentLanguage].addTask}">
            <select>
                <option value="low">${translations[currentLanguage].low}</option>
                <option value="medium">${translations[currentLanguage].medium}</option>
                <option value="high">${translations[currentLanguage].high}</option>
            </select>
            <button class="save-btn">${translations[currentLanguage].save}</button>
            <button class="cancel-btn">${translations[currentLanguage].cancel}</button>
        `;
        form.querySelector('.save-btn').addEventListener('click', () => {
            const text = form.querySelector('input').value;
            const priority = form.querySelector('select').value;
            if (text) {
                const task = { text, priority, column: columnId };
                tasks.push(task);
                createTaskElement(task);
                saveTasks();
                form.remove();
            }
        });
        form.querySelector('.cancel-btn').addEventListener('click', () => form.remove());
        e.target.closest('.kanban-column').appendChild(form);
    }

    function setupDragAndDrop() {
        document.querySelectorAll('.kanban-task').forEach(task => {
            task.addEventListener('dragstart', () => {
                isDraggingTask = true;
                dragTask = task;
                task.classList.add('dragging');
            });
            task.addEventListener('dragend', () => {
                isDraggingTask = false;
                dragTask = null;
                task.classList.remove('dragging');
                saveTasks();
            });
        });
        document.querySelectorAll('.kanban-column').forEach(column => {
            column.addEventListener('dragover', e => {
                e.preventDefault();
                const afterElement = getDragAfterElement(column, e.clientY);
                const draggable = document.querySelector('.dragging');
                if (afterElement) {
                    column.insertBefore(draggable, afterElement);
                } else {
                    column.appendChild(draggable);
                }
            });
            column.addEventListener('drop', e => {
                e.preventDefault();
                const draggable = document.querySelector('.dragging');
                if (draggable) {
                    column.appendChild(draggable);
                    saveTasks();
                }
            });
        });
    }

    function getDragAfterElement(column, y) {
        return [...column.querySelectorAll('.kanban-task:not(.dragging)')]
            .reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                return offset < 0 && offset > closest.offset ? { offset: offset, element: child } : closest;
            }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    function saveTasks() {
        tasks = [];
        document.querySelectorAll('.kanban-column').forEach(column => {
            column.querySelectorAll('.kanban-task').forEach(task => {
                tasks.push({
                    text: task.querySelector('.task-content div').textContent,
                    priority: task.className.match(/priority-(low|medium|high)/)[1],
                    column: column.id
                });
            });
        });
        GM_setValue('kanbanTasks', JSON.stringify(tasks));
    }

    function exportTasks() {
        const data = JSON.stringify(tasks, null, 2);
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `kanban-${new Date().toISOString()}.json`;
        a.click();
    }

    function importTasks() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'application/json';
        input.addEventListener('change', e => {
            const file = e.target.files[0];
            const reader = new FileReader();
            reader.onload = () => {
                try {
                    const newTasks = JSON.parse(reader.result);
                    document.querySelectorAll('.kanban-task').forEach(t => t.remove());
                    newTasks.forEach(task => createTaskElement(task));
                    saveTasks();
                } catch {
                    alert(translations[currentLanguage].importError);
                }
            };
            reader.readAsText(file);
        });
        input.click();
    }

    function toggleLanguageMenu(e) {
        const menu = document.querySelector('.language-menu');
        menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        e.stopPropagation();
    }

    function changeLanguage(e) {
        currentLanguage = e.target.dataset.lang;
        document.querySelectorAll('.kanban-title').forEach(el => {
            el.textContent = translations[currentLanguage].title;
        });
        document.querySelectorAll('.kanban-column h3').forEach((el, index) => {
            const keys = ['todo', 'inProgress', 'done'];
            el.textContent = translations[currentLanguage][keys[index]];
        });
        document.querySelectorAll('.add-task-button').forEach(el => {
            el.innerHTML = `+ ${translations[currentLanguage].addTask}`;
        });
        document.getElementById('exportBtn').textContent = `↓ ${translations[currentLanguage].export}`;
        document.getElementById('importBtn').textContent = `↑ ${translations[currentLanguage].import}`;
        document.getElementById('languageBtn').textContent = `🌐 ${translations[currentLanguage].language}`;
        toggleBtn.textContent = translations[currentLanguage].title;
        saveTasks();
        document.querySelector('.language-menu').style.display = 'none';
    }

    function changeSize(e) {
        const size = e.target.dataset.size;
        switch(size) {
            case 'small': container.style.width = '400px'; break;
            case 'medium': container.style.width = '800px'; break;
            case 'large': container.style.width = '1200px'; break;
        }
    }

    function makeDraggable(element) {
        let offsetX, offsetY;
        element.addEventListener('mousedown', (e) => {
            if (isDraggingTask) return;
            offsetX = e.clientX - element.getBoundingClientRect().left;
            offsetY = e.clientY - element.getBoundingClientRect().top;
            document.addEventListener('mousemove', mouseMoveHandler);
            document.addEventListener('mouseup', mouseUpHandler);
        });
        function mouseMoveHandler(e) {
            element.style.left = `${e.clientX - offsetX}px`;
            element.style.top = `${e.clientY - offsetY}px`;
            element.style.position = 'absolute';
        }
        function mouseUpHandler() {
            document.removeEventListener('mousemove', mouseMoveHandler);
            document.removeEventListener('mouseup', mouseUpHandler);
        }
    }

    initKanban();
    document.addEventListener('click', () => {
        document.querySelector('.language-menu').style.display = 'none';
    });
    window.addEventListener('resize', () => {
        container.style.width = window.innerWidth < 768 ? '95vw' : '800px';
    });
})();
